@page "/receipts"
@using ExpenseExplorer.API.Contract.ReadModel
@using ExpenseExplorer.GUI.Helpers
@inject IHttpClientFactory ClientFactory
@inject DialogService DialogService
@rendermode InteractiveServer

<RadzenComponents/>

<PageTitle>Receipts</PageTitle>

<RadzenDataGrid
    @ref="_grid"
    Data="@_receipts"
    Count="@_count"
    TItem="ReceiptHeaderResponse"
    LoadData="@LoadData"
    AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Center"
    PageSizeOptions="@_pageSizeOptions"
    ShowPagingSummary="true"
    PagingSummaryFormat="Displaying page {0} of {1} <b>(total {2} records)</b>"
    GridLines="DataGridGridLines.Both"
    AllowSorting="true"
    AllowFiltering="true"
    AllowAlternatingRows="false"
    FilterMode="FilterMode.Simple"
    @bind-Value=@_selected
    IsLoading=@_isLoading
    Density="Density.Compact"
    EditMode="DataGridEditMode.Single"
    ExpandMode="DataGridExpandMode.Single"
    RowExpand="RowExpand"
    RowCollapse="RowCollapse">
    <HeaderTemplate>
        <RadzenButton
            ButtonStyle="ButtonStyle.Success"
            Icon="add_circle_outline"
            Text="Add New Receipt"
            Click="@AddReceipt"/>
        <RadzenButton Click="() => { _selected = null; }" Text="Clear Selection"
                      Disabled="@(_selected?.Any() != true)"/>
    </HeaderTemplate>
    <Template>
        <RadzenDataGrid
            @ref="_detailGrid"
            AllowFiltering="true"
            AllowSorting="true"
            TItem="GetReceiptPurchaseResponse"
            IsLoading="@_isLoadingDetail"
            Data="@_purchases">
            <HeaderTemplate>
                <RadzenButton
                    ButtonStyle="ButtonStyle.Success"
                    Icon="add_circle_outline"
                    Text="Add New Purchase"
                    Click="@AddPurchase"/>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Property="Item" Title="Item"/>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Property="Category" Title="Category"/>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Property="Quantity" Title="Quantity"/>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Property="UnitPrice" Title="Unit price"/>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Property="TotalDiscount"
                                      Title="Total discount"/>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Title="Total cost">
                    <Template Context="purchase">
                        <RadzenText>@(purchase.UnitPrice * purchase.Quantity - purchase.TotalDiscount)</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="GetReceiptPurchaseResponse" Property="Description" Title="Description"/>
                <RadzenDataGridColumn
                    Context="purchase"
                    Filterable="false"
                    Sortable="false"
                    TextAlign="TextAlign.Right"
                    Frozen="true"
                    FrozenPosition="FrozenColumnPosition.Right">
                    <Template Context="purchase">
                        <RadzenButton
                            Icon="edit"
                            ButtonStyle="ButtonStyle.Light"
                            Variant="Variant.Flat"
                            Size="ButtonSize.Small"
                            Click="@(_ => EditPurchase(purchase.Id))"
                            @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton
                            ButtonStyle="ButtonStyle.Danger"
                            Icon="delete"
                            Variant="Variant.Flat"
                            Shade="Shade.Lighter"
                            Size="ButtonSize.Small"
                            class="my-1 ms-1"
                            Click="@(_ => DeletePurchase(purchase))"
                            @onclick:stopPropagation="true"/>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="ReceiptHeaderResponse" Property="Store" Title="Store">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Store">
                    <RadzenTextBox @bind-Value=@_store Change="OnStoreChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn
            TItem="ReceiptHeaderResponse"
            Property="PurchaseDate"
            Title="Purchase date"
            FormatString="{0:dd.MM.yyyy}">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Purchased after">
                    <RadzenDatePicker
                        @bind-Value=@_purchasedAfter
                        DateFormat="dd.MM.yyyy"
                        Change="OnPurchasedAfterChange"/>
                </RadzenFormField>
                <RadzenFormField AllowFloatingLabel="false" Text="Purchased before">
                    <RadzenDatePicker
                        @bind-Value=@_purchasedBefore
                        DateFormat="dd.MM.yyyy"
                        Change="OnPurchasedBeforeChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ReceiptHeaderResponse" Property="Total" Title="Total" FormatString="{0:0.00} zł">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Min total">
                    <RadzenNumeric
                        ShowUpDown="false"
                        TValue="decimal?"
                        @bind-Value=@_minTotal
                        Change="OnMinTotalChange"/>
                </RadzenFormField>
                <RadzenFormField AllowFloatingLabel="false" Text="Max total">
                    <RadzenNumeric
                        ShowUpDown="false"
                        TValue="decimal?"
                        @bind-Value=@_maxTotal
                        Change="OnMaxTotalChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn
            Context="receipt"
            Filterable="false"
            Sortable="false"
            TextAlign="TextAlign.Right"
            Frozen="true"
            FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="receipt">
                <RadzenButton
                    Icon="edit"
                    ButtonStyle="ButtonStyle.Light"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Small"
                    Click="@(_ => EditReceipt(receipt.Id))"
                    @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton
                    ButtonStyle="ButtonStyle.Danger"
                    Icon="delete"
                    Variant="Variant.Flat"
                    Shade="Shade.Lighter"
                    Size="ButtonSize.Small"
                    class="my-1 ms-1"
                    Click="@(_ => DeleteReceipt(receipt))"
                    @onclick:stopPropagation="true"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code
{
    private readonly IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    private RadzenDataGrid<ReceiptHeaderResponse> _grid = default!;
    private RadzenDataGrid<GetReceiptPurchaseResponse> _detailGrid = default!;
    private IEnumerable<ReceiptHeaderResponse> _receipts = default!;
    private IEnumerable<GetReceiptPurchaseResponse> _purchases = default!;
    private int _count;
    private bool _isLoading = true;
    private bool _isLoadingDetail = true;
    private DateTime? _purchasedAfter;
    private DateTime? _purchasedBefore;
    private decimal? _minTotal;
    private decimal? _maxTotal;
    private string? _store;

    private IList<ReceiptHeaderResponse>? _selected;
    private ReceiptHeaderResponse? _expanded;

    private async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        string url = $"http://localhost:5163/api/receipts?{GetParameters(args)}";
        using HttpClient client = ClientFactory.CreateClient();
        GetReceiptsResponse? response = await client.GetFromJsonAsync<GetReceiptsResponse>(url);
        if (response is not null)
        {
            _count = response.FilteredCount;
            _receipts = response.Receipts;
        }

        _isLoading = false;
    }

    private string GetParameters(LoadDataArgs args)
    {
        QueryParameters parameters = new();
        (int pageNumber, int pageSize) = args.GetPagingParameters();
        parameters.Add(pageNumber, "pageNumber");
        parameters.Add(pageSize, "pageSize");
        (string? sortBy, string? sortOrder) = args.GetOrderByParameters();
        parameters.Add(sortBy, "sortBy");
        parameters.Add(sortOrder, "sortOrder");
        parameters.Add(_minTotal, "minTotal");
        parameters.Add(_maxTotal, "maxTotal");
        parameters.Add(_purchasedAfter, "after");
        parameters.Add(_purchasedBefore, "before");
        parameters.Add(_store, "search");
        return parameters.ToString();
    }

    private async Task OnPurchasedAfterChange(DateTime? _) => await _grid.Reload();

    private async Task OnPurchasedBeforeChange(DateTime? _) => await _grid.Reload();

    private async Task OnMinTotalChange(decimal? _) => await _grid.Reload();

    private async Task OnMaxTotalChange(decimal? _) => await _grid.Reload();

    private async Task OnStoreChange(string _) => await _grid.Reload();

    private async Task RowExpand(ReceiptHeaderResponse receipt)
    {
        _isLoadingDetail = true;
        _expanded = receipt;
        string url = $"http://localhost:5163/api/receipts/{receipt.Id}";
        using HttpClient client = ClientFactory.CreateClient();
        GetReceiptResponse? response = await client.GetFromJsonAsync<GetReceiptResponse>(url);
        if (response is not null)
        {
            _purchases = response.Purchases;
        }

        _isLoadingDetail = false;
    }

    private void RowCollapse()
    {
        _expanded = null;
    }

    private async Task AddReceipt()
    {
        await Task.Delay(1);
    }

    private async Task EditReceipt(string receiptId)
    {
        await Task.Delay(1);
    }

    private async Task DeleteReceipt(ReceiptHeaderResponse receipt)
    {
        bool? youSure = await DialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (youSure.HasValue == false || youSure.Value == false)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(receipt.Id))
        {
            _grid.CancelEditRow(receipt);
        }
        else
        {
            using HttpClient client = ClientFactory.CreateClient();
            await client.DeleteAsync($"http://localhost:5163/api/receipts/{receipt.Id}");
            await _grid.Reload();
        }
    }

    private async Task AddPurchase()
    {
        await Task.Delay(1);
    }

    private async Task EditPurchase(string purchaseId)
    {
        await Task.Delay(1);
    }

    private async Task DeletePurchase(GetReceiptPurchaseResponse purchase)
    {
        if (_expanded is null)
        {
            return;
        }

        bool? youSure = await DialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (youSure.HasValue == false || youSure.Value == false)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(purchase.Id))
        {
            _detailGrid.CancelEditRow(purchase);
        }
        else
        {
            using HttpClient client = ClientFactory.CreateClient();
            await client.DeleteAsync($"http://localhost:5163/api/receipts/{_expanded.Id}/purchases/{purchase.Id}");
            await _grid.Reload();
        }
    }
}
