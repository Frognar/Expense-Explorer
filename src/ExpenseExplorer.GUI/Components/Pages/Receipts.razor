@page "/receipts"
@using System.Globalization
@using System.Text.Json
@using ExpenseExplorer.API.Contract
@using ExpenseExplorer.API.Contract.ReadModel
@using ExpenseExplorer.GUI.Data
@using ExpenseExplorer.GUI.Helpers
@inject IHttpClientFactory ClientFactory
@inject DialogService DialogService
@inject IConfiguration Configuration
@rendermode InteractiveServer

<RadzenComponents/>

<PageTitle>Receipts</PageTitle>

<RadzenDataGrid
    @ref="_grid"
    Data="@_receipts"
    Count="@_count"
    TItem="ReceiptModel"
    LoadData="@LoadData"
    AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Center"
    PageSizeOptions="@_pageSizeOptions"
    ShowPagingSummary="true"
    PagingSummaryFormat="Displaying page {0} of {1} <b>(total {2} records)</b>"
    GridLines="DataGridGridLines.Both"
    AllowSorting="true"
    AllowFiltering="true"
    AllowAlternatingRows="false"
    FilterMode="FilterMode.Simple"
    @bind-Value=@_selected
    IsLoading=@_isLoading
    Density="Density.Compact"
    EditMode="DataGridEditMode.Single"
    ExpandMode="DataGridExpandMode.Single"
    RowExpand="RowExpand"
    RowCollapse="RowCollapse"
    RowCreate="@OnReceiptCreateRow"
    RowUpdate="@OnReceiptUpdateRow"
    Sort="@ResetReceipts"
    Page="@ResetReceipts">
<HeaderTemplate>
    <RadzenButton
        ButtonStyle="ButtonStyle.Success"
        Icon="add_circle_outline"
        Text="Add New Receipt"
        Click="@InsertReceipt"
        Disabled="@(_receiptsToInsert.Any() || _receiptsToUpdate.Any() || _isLoading)"/>
    <RadzenButton Click="() => { _selected = null; }" Text="Clear Selection"
                  Disabled="@(_selected?.Any() != true)"/>
</HeaderTemplate>
<Template>
    <RadzenDataGrid
        @ref="_detailGrid"
        AllowFiltering="true"
        AllowSorting="true"
        TItem="PurchaseModel"
        IsLoading="@_isLoadingDetail"
        Data="@_purchases"
        RowCreate="@OnPurchaseCreateRow"
        RowUpdate="@OnPurchaseUpdateRow"
        Sort="@ResetPurchases">
        <HeaderTemplate>
            <RadzenButton
                ButtonStyle="ButtonStyle.Success"
                Icon="add_circle_outline"
                Text="Add New Purchase"
                Click="@InsertPurchase"
                Disabled="@(_purchasesToInsert.Any() || _purchasesToUpdate.Any() || _isLoadingDetail)"/>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="Item" Title="Item">
                <EditTemplate Context="purchase">
                    <RadzenAutoComplete @bind-Value="purchase.Item" Data="_items" LoadData="@OnLoadItems"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="Category" Title="Category">
                <EditTemplate Context="purchase">
                    <RadzenAutoComplete @bind-Value="purchase.Category" Data="_categories" LoadData="@OnLoadCategories"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="Quantity" Title="Quantity">
                <EditTemplate Context="purchase">
                    <RadzenNumeric ConvertValue="ConvertDecimal" TValue="decimal" @bind-Value="purchase.Quantity"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="UnitPrice" Title="Unit price"
                                  FormatString="{0:0.00} zł">
                <EditTemplate Context="purchase">
                    <RadzenNumeric ConvertValue="ConvertDecimal" TValue="decimal" @bind-Value="purchase.UnitPrice"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="TotalDiscount" Title="Total discount"
                                  FormatString="{0:0.00} zł">
                <EditTemplate Context="purchase">
                    <RadzenNumeric ConvertValue="ConvertDecimal" TValue="decimal" @bind-Value="purchase.TotalDiscount"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="TotalCost" Title="Total cost"
                                  FormatString="{0:0.00} zł"/>
            <RadzenDataGridColumn TItem="PurchaseModel" Property="Description" Title="Description">
                <EditTemplate Context="purchase">
                    <RadzenTextBox @bind-Value="purchase.Description"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn
                Context="purchase"
                Filterable="false"
                Sortable="false"
                TextAlign="TextAlign.Right"
                Frozen="true"
                FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="purchase">
                    <RadzenButton
                        Icon="edit"
                        ButtonStyle="ButtonStyle.Light"
                        Variant="Variant.Flat"
                        Size="ButtonSize.Small"
                        Click="@(_ => EditPurchaseRow(purchase))"
                        @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton
                        ButtonStyle="ButtonStyle.Danger"
                        Icon="delete"
                        Variant="Variant.Flat"
                        Shade="Shade.Lighter"
                        Size="ButtonSize.Small"
                        class="my-1 ms-1"
                        Click="@(_ => DeletePurchase(purchase))"
                        @onclick:stopPropagation="true"/>
                </Template>
                <EditTemplate Context="purchase">
                    <RadzenButton
                        Icon="check"
                        ButtonStyle="ButtonStyle.Success"
                        Variant="Variant.Flat"
                        Size="ButtonSize.Small"
                        Click="@(_ => SavePurchaseRow(purchase))"/>
                    <RadzenButton
                        Icon="close"
                        ButtonStyle="ButtonStyle.Light"
                        Variant="Variant.Flat"
                        Size="ButtonSize.Small"
                        class="my-1 ms-1"
                        Click="@(_ => CancelPurchaseEdit(purchase))"/>
                    <RadzenButton
                        ButtonStyle="ButtonStyle.Danger"
                        Icon="delete"
                        Variant="Variant.Flat"
                        Shade="Shade.Lighter"
                        Size="ButtonSize.Small"
                        class="my-1 ms-1"
                        Click="@(_ => DeletePurchase(purchase))"
                        @onclick:stopPropagation="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</Template>
<Columns>
    <RadzenDataGridColumn TItem="ReceiptModel" Property="Store" Title="Store">
        <EditTemplate Context="receipt">
            <RadzenAutoComplete @bind-Value="receipt.Store" Data="_stores" LoadData="@OnLoadStores"/>
        </EditTemplate>
        <FilterTemplate>
            <RadzenFormField AllowFloatingLabel="false" Text="Store">
                <RadzenTextBox @bind-Value=@_store Change="OnStoreChange"/>
            </RadzenFormField>
        </FilterTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn
        TItem="ReceiptModel"
        Property="PurchaseDate"
        Title="Purchase date"
        FormatString="{0:dd.MM.yyyy}">
        <EditTemplate Context="receipt">
            <RadzenDatePicker @bind-Value="receipt.PurchaseDate" DateFormat="dd.MM.yyyy"/>
        </EditTemplate>
        <FilterTemplate>
            <RadzenFormField AllowFloatingLabel="false" Text="Purchased after">
                <RadzenDatePicker
                    @bind-Value=@_purchasedAfter
                    DateFormat="dd.MM.yyyy"
                    Change="OnPurchasedAfterChange"/>
            </RadzenFormField>
            <RadzenFormField AllowFloatingLabel="false" Text="Purchased before">
                <RadzenDatePicker
                    @bind-Value=@_purchasedBefore
                    DateFormat="dd.MM.yyyy"
                    Change="OnPurchasedBeforeChange"/>
            </RadzenFormField>
        </FilterTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn TItem="ReceiptModel" Property="Total" Title="Total" FormatString="{0:0.00} zł">
        <FilterTemplate>
            <RadzenFormField AllowFloatingLabel="false" Text="Min total">
                <RadzenNumeric
                    ConvertValue="ConvertOptionalDecimal"
                    ShowUpDown="false"
                    TValue="decimal?"
                    @bind-Value=@_minTotal
                    Change="OnMinTotalChange"/>
            </RadzenFormField>
            <RadzenFormField AllowFloatingLabel="false" Text="Max total">
                <RadzenNumeric
                    ConvertValue="ConvertOptionalDecimal"
                    ShowUpDown="false"
                    TValue="decimal?"
                    @bind-Value=@_maxTotal
                    Change="OnMaxTotalChange"/>
            </RadzenFormField>
        </FilterTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn
        Context="receipt"
        Filterable="false"
        Sortable="false"
        TextAlign="TextAlign.Right"
        Frozen="true"
        FrozenPosition="FrozenColumnPosition.Right">
        <Template Context="receipt">
            <RadzenButton
                Icon="edit"
                ButtonStyle="ButtonStyle.Light"
                Variant="Variant.Flat"
                Size="ButtonSize.Small"
                Click="@(_ => EditReceiptRow(receipt))"
                @onclick:stopPropagation="true">
            </RadzenButton>
            <RadzenButton
                ButtonStyle="ButtonStyle.Danger"
                Icon="delete"
                Variant="Variant.Flat"
                Shade="Shade.Lighter"
                Size="ButtonSize.Small"
                class="my-1 ms-1"
                Click="@(_ => DeleteReceipt(receipt))"
                @onclick:stopPropagation="true"/>
        </Template>
        <EditTemplate Context="receipt">
            <RadzenButton
                Icon="check"
                ButtonStyle="ButtonStyle.Success"
                Variant="Variant.Flat"
                Size="ButtonSize.Small"
                Click="@(_ => SaveReceiptRow(receipt))"/>
            <RadzenButton
                Icon="close"
                ButtonStyle="ButtonStyle.Light"
                Variant="Variant.Flat"
                Size="ButtonSize.Small"
                class="my-1 ms-1"
                Click="@(_ => CancelReceiptEdit(receipt))"/>
            <RadzenButton
                ButtonStyle="ButtonStyle.Danger"
                Icon="delete"
                Variant="Variant.Flat"
                Shade="Shade.Lighter"
                Size="ButtonSize.Small"
                class="my-1 ms-1"
                Click="@(_ => DeleteReceipt(receipt))"
                @onclick:stopPropagation="true"/>
        </EditTemplate>
    </RadzenDataGridColumn>
</Columns>
</RadzenDataGrid>


@code
{
    private readonly IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    private RadzenDataGrid<ReceiptModel> _grid = default!;
    private IEnumerable<ReceiptModel> _receipts = default!;
    private RadzenDataGrid<PurchaseModel> _detailGrid = default!;
    private IEnumerable<PurchaseModel> _purchases = default!;
    private int _count;
    private bool _isLoading = true;
    private bool _isLoadingDetail = true;
    private DateTime? _purchasedAfter;
    private DateTime? _purchasedBefore;
    private decimal? _minTotal;
    private decimal? _maxTotal;
    private string? _store;

    private IEnumerable<string> _stores = [];
    private IEnumerable<string> _items = [];
    private IEnumerable<string> _categories = [];

    private readonly List<ReceiptModel> _receiptsToInsert = [];
    private readonly List<ReceiptModel> _receiptsToUpdate = [];
    private ReceiptModel? _receiptEditBackup;

    private readonly List<PurchaseModel> _purchasesToInsert = [];
    private readonly List<PurchaseModel> _purchasesToUpdate = [];
    private PurchaseModel? _purchaseEditBackup;
    private IList<ReceiptModel>? _selected;
    private ReceiptModel? _expanded;

    private string _apiUrl = string.Empty;
    protected override void OnInitialized()
    {
        _apiUrl = Configuration.GetConnectionString("API") ?? throw new ArgumentNullException();
    }

    private async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        string url = $"{_apiUrl}/api/receipts?{GetParameters(args)}";
        using HttpClient client = ClientFactory.CreateClient();
        GetReceiptsResponse? response = await client.GetFromJsonAsync<GetReceiptsResponse>(url);
        if (response is not null)
        {
            _count = response.FilteredCount;
            _receipts = response.Receipts.Select(r => r.ToViewModel());
        }

        _isLoading = false;
    }

    private string GetParameters(LoadDataArgs args)
    {
        QueryParameters parameters = new();
        (int pageNumber, int pageSize) = args.GetPagingParameters();
        parameters.Add(pageNumber, "pageNumber");
        parameters.Add(pageSize, "pageSize");
        (string? sortBy, string? sortOrder) = args.GetOrderByParameters();
        parameters.Add(sortBy, "sortBy");
        parameters.Add(sortOrder, "sortOrder");
        parameters.Add(_minTotal, "minTotal");
        parameters.Add(_maxTotal, "maxTotal");
        parameters.Add(_purchasedAfter, "after");
        parameters.Add(_purchasedBefore, "before");
        parameters.Add(_store, "search");
        return parameters.ToString();
    }

    private async Task OnLoadStores(LoadDataArgs args)
    {
        string url = $"{_apiUrl}/api/stores?pageSize=50&search={args.Filter}";
        using HttpClient client = ClientFactory.CreateClient();
        GetStoresResponse? response = await client.GetFromJsonAsync<GetStoresResponse>(url);
        if (response is not null)
        {
            _stores = response.Stores;
        }
    }

    private async Task OnLoadItems(LoadDataArgs args)
    {
        string url = $"{_apiUrl}/api/items?pageSize=50&search={args.Filter}";
        using HttpClient client = ClientFactory.CreateClient();
        GetItemsResponse? response = await client.GetFromJsonAsync<GetItemsResponse>(url);
        if (response is not null)
        {
            _items = response.Items;
        }
    }

    private async Task OnLoadCategories(LoadDataArgs args)
    {
        string url = $"{_apiUrl}/api/categories/incomes?pageSize=50&search={args.Filter}";
        using HttpClient client = ClientFactory.CreateClient();
        GetCategoriesResponse? response = await client.GetFromJsonAsync<GetCategoriesResponse>(url);
        if (response is not null)
        {
            _categories = response.Categories;
        }
    }

    private async Task OnPurchasedAfterChange(DateTime? _) => await ResetAndReloadReceipts();

    private async Task OnPurchasedBeforeChange(DateTime? _) => await ResetAndReloadReceipts();

    private async Task OnMinTotalChange(decimal? _) => await ResetAndReloadReceipts();

    private async Task OnMaxTotalChange(decimal? _) => await ResetAndReloadReceipts();

    private async Task OnStoreChange(string _) => await ResetAndReloadReceipts();

    private async Task ResetAndReloadReceipts()
    {
        ResetReceipts();
        await _grid.Reload();
    }

    private void ResetReceipts()
    {
        _receiptsToInsert.Clear();
        _receiptsToUpdate.Clear();
    }

    async Task SaveReceiptRow(ReceiptModel receipt)
    {
        await _grid.UpdateRow(receipt);
    }

    void CancelReceiptEdit(ReceiptModel receipt)
    {
        ResetReceipts();
        if (_receiptEditBackup is not null)
        {
            receipt.CopyFrom(_receiptEditBackup);
            _receiptEditBackup = null;
        }

        _grid.CancelEditRow(receipt);
    }

    async Task InsertReceipt()
    {
        ResetReceipts();
        ReceiptModel receipt = new();
        _receiptsToInsert.Add(receipt);
        _count++;
        await _grid.InsertRow(receipt);
    }

    private async Task OnReceiptCreateRow(ReceiptModel receipt)
    {
        string url = $"{_apiUrl}/api/receipts";
        using HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage responseMessage = await client.PostAsJsonAsync(url, receipt.ToAddRequest());
        if (responseMessage.IsSuccessStatusCode)
        {
            string content = await responseMessage.Content.ReadAsStringAsync();
            OpenNewReceiptResponse response = JsonSerializer
                .Deserialize<OpenNewReceiptResponse>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;

            receipt.Id = response.Id;
        }
        else
        {
            _grid.CancelEditRow(receipt);
        }

        ResetReceipts();
    }

    private async Task EditReceiptRow(ReceiptModel receipt)
    {
        ResetReceipts();
        _receiptsToUpdate.Add(receipt);
        await _grid.EditRow(receipt);
        _receiptEditBackup = receipt.MakeCopy();
    }

    private async Task OnReceiptUpdateRow(ReceiptModel receipt)
    {
        string url = $"{_apiUrl}/api/receipts/{receipt.Id}";
        using HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage responseMessage = await client.PatchAsJsonAsync(url, receipt.ToEditRequest());
        if (!responseMessage.IsSuccessStatusCode)
        {
            receipt.CopyFrom(_receiptEditBackup!);
            _grid.CancelEditRow(receipt);
        }

        _receiptEditBackup = null;
        ResetReceipts();
    }

    private async Task DeleteReceipt(ReceiptModel receipt)
    {
        bool? youSure = await DialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (youSure.HasValue == false || youSure.Value == false)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(receipt.Id))
        {
            _grid.CancelEditRow(receipt);
        }
        else
        {
            using HttpClient client = ClientFactory.CreateClient();
            HttpResponseMessage responseMessage = await client.DeleteAsync($"{_apiUrl}/api/receipts/{receipt.Id}");
            if (responseMessage.IsSuccessStatusCode)
            {
                await _grid.Reload();
            }
        }
    }

    private async Task RowExpand(ReceiptModel receipt)
    {
        _isLoadingDetail = true;
        _expanded = receipt;
        string url = $"{_apiUrl}/api/receipts/{receipt.Id}";
        using HttpClient client = ClientFactory.CreateClient();
        GetReceiptResponse? response = await client.GetFromJsonAsync<GetReceiptResponse>(url);
        if (response is not null)
        {
            _purchases = response.Purchases.Select(p => p.ToViewModel());
        }

        _isLoadingDetail = false;
    }

    private void RowCollapse()
    {
        _expanded = null;
    }

    private void ResetPurchases()
    {
        _purchasesToInsert.Clear();
        _purchasesToUpdate.Clear();
    }

    private async Task SavePurchaseRow(PurchaseModel purchase)
    {
        await _detailGrid.UpdateRow(purchase);
    }

    private void CancelPurchaseEdit(PurchaseModel purchase)
    {
        ResetPurchases();
        if (_purchaseEditBackup is not null)
        {
            purchase.CopyFrom(_purchaseEditBackup);
            _receiptEditBackup = null;
        }

        _detailGrid.CancelEditRow(purchase);
    }

    private async Task InsertPurchase()
    {
        ResetPurchases();
        PurchaseModel purchase = new();
        _purchasesToInsert.Add(purchase);
        await _detailGrid.InsertRow(purchase);
    }

    private async Task OnPurchaseCreateRow(PurchaseModel purchase)
    {
        if (_expanded is null)
        {
            return;
        }

        string url = $"{_apiUrl}/api/receipts/{_expanded.Id}/purchases";
        using HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage responseMessage = await client.PostAsJsonAsync(url, purchase.ToAddRequest());
        if (responseMessage.IsSuccessStatusCode)
        {
            string content = await responseMessage.Content.ReadAsStringAsync();
            AddPurchaseResponse response = JsonSerializer
                .Deserialize<AddPurchaseResponse>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;

            purchase.Id = response.Purchases.Last().Id;
            _expanded.Total += purchase.TotalCost;
        }
        else
        {
            _detailGrid.CancelEditRow(purchase);
        }

        ResetPurchases();
    }

    private async Task EditPurchaseRow(PurchaseModel purchase)
    {
        ResetPurchases();
        _purchasesToUpdate.Add(purchase);
        await _detailGrid.EditRow(purchase);
        _purchaseEditBackup = purchase.MakeCopy();
    }

    private async Task OnPurchaseUpdateRow(PurchaseModel purchase)
    {
        if (_expanded is null)
        {
            return;
        }

        string url = $"{_apiUrl}/api/receipts/{_expanded.Id}/purchases/{purchase.Id}";
        using HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage responseMessage = await client.PatchAsJsonAsync(url, purchase.ToEditRequest());
        if (!responseMessage.IsSuccessStatusCode)
        {
            purchase.CopyFrom(_purchaseEditBackup!);
            _detailGrid.CancelEditRow(purchase);
        }

        _expanded.Total -= _purchaseEditBackup!.TotalCost;
        _expanded.Total += purchase.TotalCost;
        _purchaseEditBackup = null;
        ResetPurchases();
    }

    private async Task DeletePurchase(PurchaseModel purchase)
    {
        if (_expanded is null)
        {
            return;
        }

        bool? youSure = await DialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (youSure.HasValue == false || youSure.Value == false)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(purchase.Id))
        {
            _detailGrid.CancelEditRow(purchase);
        }
        else
        {
            using HttpClient client = ClientFactory.CreateClient();
            HttpResponseMessage responseMessage = await client.DeleteAsync($"{_apiUrl}/api/receipts/{_expanded.Id}/purchases/{purchase.Id}");
            if (responseMessage.IsSuccessStatusCode)
            {
                _expanded.Total -= purchase.TotalCost;
                await RowExpand(_expanded);
            }
        }
    }

    private static decimal ConvertDecimal(string arg)
    {
        return decimal.TryParse(arg.Replace(",", "."), CultureInfo.InvariantCulture, out var result)
            ? result
            : default;
    }

    private static decimal? ConvertOptionalDecimal(string? arg)
    {
        return arg is null ? null : ConvertDecimal(arg);
    }
}
