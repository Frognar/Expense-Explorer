@page "/reports"
@using ExpenseExplorer.API.Contract.ReadModel
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@rendermode InteractiveServer

<PageTitle>Reports</PageTitle>
<RadzenCard class="rz-my-1 p-2 w-100">
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="1rem" class="w-100">
        <RadzenColumn Size="8" SizeMD="4" SizeLG="4" >
            <RadzenFormField AllowFloatingLabel="false" Text="From" class="w-100">
                <RadzenDatePicker @bind-Value="_from" DateFormat="dd.MM.yyyy"/>
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="8" SizeMD="4" SizeLG="4">
            <RadzenFormField AllowFloatingLabel="false" Text="To" class="w-100">
                <RadzenDatePicker @bind-Value="_to" DateFormat="dd.MM.yyyy"/>
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="8" SizeMD="4" SizeLG="4">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Dark" Variant="Variant.Flat" Click="@LoadData" Text="Load"/>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<RadzenCard class="rz-my-1 p-2 w-100">
<RadzenChart>
    <RadzenPieSeries
        Data="@_categoryBasedEntries"
        Title="Category"
        CategoryProperty="Category"
        ValueProperty="Total"
        TooltipTemplate="@_tooltipTemplate">
        <ChildContent>
            <RadzenSeriesDataLabels Visible="true"/>
            <RadzenValueAxis FormatString="{0:0.00} zł"/>
        </ChildContent>
    </RadzenPieSeries>
</RadzenChart>
</RadzenCard>
<RadzenCard class="rz-my-1 p-2 w-100">
<RadzenChart>
    <RadzenStackedColumnSeries
        Data="@_income"
        Title="Income"
        CategoryProperty="Name"
        ValueProperty="Value">
        <RadzenSeriesDataLabels Visible="true"/>
    </RadzenStackedColumnSeries>
    <RadzenStackedColumnSeries
        Data="@_expense"
        Title="Expense"
        CategoryProperty="Name"
        ValueProperty="Value">
        <RadzenSeriesDataLabels Visible="true"/>
    </RadzenStackedColumnSeries>
</RadzenChart>
</RadzenCard>

@code
{
    private readonly RenderFragment<CategoryBasedEntryResponse> _tooltipTemplate = cc
        => @<div><span>@cc.Category</span>: <strong>@($"{cc.Total:0.00} zł")</strong></div>;

    private IEnumerable<CategoryBasedEntryResponse> _categoryBasedEntries = [];
    private IEnumerable<Entry> _income = [];
    private IEnumerable<Entry> _expense = [];
    private DateOnly _from = DateOnly.MinValue;
    private DateOnly _to = DateOnly.MaxValue;

    private string _apiUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        DateTime today = DateTime.Today;
        _from = new(today.Year, today.Month, 1);
        _to = new DateOnly(today.Year, today.Month, 1).AddMonths(1).AddDays(-1);
        _apiUrl = Configuration.GetConnectionString("API") ?? throw new ArgumentNullException();
        await LoadData();
    }

    private async Task LoadData()
    {
        string baseUrl = $"{_apiUrl}/api/reports";
        string parameters = $"from={_from}&to={_to}";
        using HttpClient client = ClientFactory.CreateClient();
        GenerateCategoryBasedExpenseReportResponse? categoryBasedExpenseReport =
            await client.GetFromJsonAsync<GenerateCategoryBasedExpenseReportResponse>($"{baseUrl}/category-based-expense?{parameters}");

        if (categoryBasedExpenseReport is not null)
        {
            _categoryBasedEntries = categoryBasedExpenseReport.Categories;
        }

        GenerateIncomeToExpenseReportResponse? incomeToExpenseReport =
            await client.GetFromJsonAsync<GenerateIncomeToExpenseReportResponse>($"{baseUrl}/income-to-expense?{parameters}");

        if (incomeToExpenseReport is not null)
        {
            _income = [new Entry(incomeToExpenseReport.TotalIncome, "Income")];
            _expense = [new Entry(incomeToExpenseReport.TotalExpense, "Expense")];
        }
    }

    private readonly record struct Entry(decimal Value, string Name);

}

