@page "/income"
@using System.Globalization
@using System.Text.Json
@using ExpenseExplorer.API.Contract
@using ExpenseExplorer.API.Contract.ReadModel
@using ExpenseExplorer.GUI.Data
@using ExpenseExplorer.GUI.Helpers
@inject IHttpClientFactory ClientFactory
@inject DialogService DialogService
@inject IConfiguration Configuration
@rendermode InteractiveServer

<RadzenComponents/>

<PageTitle>Income</PageTitle>

<RadzenDataGrid
    @ref="_grid"
    Data="@_incomes"
    Count="@_count"
    TItem="IncomeModel"
    LoadData="@LoadData"
    AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Center"
    PageSizeOptions="@_pageSizeOptions"
    ShowPagingSummary="true"
    PagingSummaryFormat="Displaying page {0} of {1} <b>(total {2} records)</b>"
    GridLines="DataGridGridLines.Both"
    AllowSorting="true"
    AllowFiltering="true"
    AllowAlternatingRows="false"
    FilterMode="FilterMode.Simple"
    @bind-Value=@_selected
    IsLoading=@_isLoading
    Density="Density.Compact"
    EditMode="DataGridEditMode.Single"
    RowCreate="@OnCreateRow"
    RowUpdate="@OnUpdateRow"
    Sort="@Reset"
    Page="@Reset">
    <HeaderTemplate>
        <RadzenButton
            ButtonStyle="ButtonStyle.Success"
            Icon="add_circle_outline"
            Text="Add New Income"
            Click="@InsertRow"
            Disabled="@(_incomesToInsert.Any() || _incomesToUpdate.Any() || _isLoading)"/>
        <RadzenButton Click="() => { _selected = null; }" Text="Clear Selection"
                      Disabled="@(_selected?.Any() != true)"/>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="IncomeModel" Property="Source" Title="Source">
            <EditTemplate Context="income">
                <RadzenAutoComplete @bind-Value="income.Source" Data="_sources" LoadData="@OnLoadSources"/>
            </EditTemplate>
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Source">
                    <RadzenTextBox @bind-Value=@_source Change="OnSourceChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeModel" Property="Amount" Title="Amount" FormatString="{0:0.00} zł">
            <EditTemplate Context="income">
                <RadzenNumeric ConvertValue="ConvertDecimal" TValue="decimal" @bind-Value="income.Amount"/>
            </EditTemplate>
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Min amount">
                    <RadzenNumeric
                        ConvertValue="ConvertOptionalDecimal"
                        ShowUpDown="false"
                        TValue="decimal?"
                        @bind-Value=@_minAmount
                        Change="OnMinAmountChange"/>
                </RadzenFormField>
                <RadzenFormField AllowFloatingLabel="false" Text="Max amount">
                    <RadzenNumeric
                        ConvertValue="ConvertOptionalDecimal"
                        ShowUpDown="false"
                        TValue="decimal?"
                        @bind-Value=@_maxAmount
                        Change="OnMaxAmountChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeModel" Property="Category" Title="Category">
            <EditTemplate Context="income">
                <RadzenAutoComplete @bind-Value="income.Category" Data="_categories" LoadData="@OnLoadCategories"/>
            </EditTemplate>
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Category">
                    <RadzenTextBox @bind-Value=@_category Change="OnCategoryChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn
            TItem="IncomeModel"
            Property="ReceivedDate"
            Title="Received date"
            FormatString="{0:dd.MM.yyyy}"
            SortOrder="SortOrder.Descending">
            <EditTemplate Context="income">
                <RadzenDatePicker @bind-Value="income.ReceivedDate" DateFormat="dd.MM.yyyy"/>
            </EditTemplate>
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Received after">
                    <RadzenDatePicker
                        @bind-Value=@_receivedAfter
                        DateFormat="dd.MM.yyyy"
                        Change="OnReceivedAfterChange"/>
                </RadzenFormField>
                <RadzenFormField AllowFloatingLabel="false" Text="Received before">
                    <RadzenDatePicker
                        @bind-Value=@_receivedBefore
                        DateFormat="dd.MM.yyyy"
                        Change="OnReceivedBeforeChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeModel" Property="Description" Title="Description">
            <EditTemplate Context="income">
                <RadzenTextBox @bind-Value="income.Description"/>
            </EditTemplate>
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Description">
                    <RadzenTextBox @bind-Value=@_description Change="OnDescriptionChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn
            Context="income"
            Filterable="false"
            Sortable="false"
            TextAlign="TextAlign.Right"
            Frozen="true"
            FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="income">
                <RadzenButton
                    Icon="edit"
                    ButtonStyle="ButtonStyle.Light"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Small"
                    Click="@(_ => EditRow(income))"
                    @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton
                    ButtonStyle="ButtonStyle.Danger"
                    Icon="delete"
                    Variant="Variant.Flat"
                    Shade="Shade.Lighter"
                    Size="ButtonSize.Small"
                    class="my-1 ms-1"
                    Click="@(_ => DeleteRow(income))"
                    @onclick:stopPropagation="true"/>
            </Template>
            <EditTemplate Context="income">
                <RadzenButton
                    Icon="check"
                    ButtonStyle="ButtonStyle.Success"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Small"
                    Click="@(_ => SaveRow(income))"/>
                <RadzenButton
                    Icon="close"
                    ButtonStyle="ButtonStyle.Light"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Small"
                    class="my-1 ms-1"
                    Click="@(_ => CancelEdit(income))"/>
                <RadzenButton
                    ButtonStyle="ButtonStyle.Danger"
                    Icon="delete"
                    Variant="Variant.Flat"
                    Shade="Shade.Lighter"
                    Size="ButtonSize.Small"
                    class="my-1 ms-1"
                    Click="@(_ => DeleteRow(income))"
                    @onclick:stopPropagation="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code
{
    private readonly IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    private RadzenDataGrid<IncomeModel> _grid = default!;
    private IEnumerable<IncomeModel> _incomes = default!;
    private int _count;
    private bool _isLoading = true;
    private DateTime? _receivedAfter;
    private DateTime? _receivedBefore;
    private decimal? _minAmount;
    private decimal? _maxAmount;
    private string? _source;
    private string? _category;
    private string? _description;

    private IEnumerable<string> _categories = [];
    private IEnumerable<string> _sources = [];

    private readonly List<IncomeModel> _incomesToInsert = [];
    private readonly List<IncomeModel> _incomesToUpdate = [];
    private IncomeModel? _editBackup;
    private IList<IncomeModel>? _selected;

    private string _apiUrl = string.Empty;
    protected override void OnInitialized()
    {
        _apiUrl = Configuration.GetConnectionString("API") ?? throw new ArgumentNullException();
    }

    private async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        string url = $"{_apiUrl}/api/incomes?{GetParameters(args)}";
        using HttpClient client = ClientFactory.CreateClient();
        GetIncomesResponse? response = await client.GetFromJsonAsync<GetIncomesResponse>(url);
        if (response is not null)
        {
            _count = response.FilteredCount;
            _incomes = response.Incomes.Select(income => income.ToViewModel());
        }

        _isLoading = false;
    }

    private string GetParameters(LoadDataArgs args)
    {
        QueryParameters parameters = new();
        (int pageNumber, int pageSize) = args.GetPagingParameters();
        parameters.Add(pageNumber, "pageNumber");
        parameters.Add(pageSize, "pageSize");
        (string? sortBy, string? sortOrder) = args.GetOrderByParameters();
        parameters.Add(sortBy, "sortBy");
        parameters.Add(sortOrder, "sortOrder");
        parameters.Add(_minAmount, "minAmount");
        parameters.Add(_maxAmount, "maxAmount");
        parameters.Add(_receivedAfter, "receivedAfter");
        parameters.Add(_receivedBefore, "receivedBefore");
        parameters.Add(_source, "source");
        parameters.Add(_category, "category");
        parameters.Add(_description, "description");
        return parameters.ToString();
    }

    private async Task OnLoadSources(LoadDataArgs args)
    {
        string url = $"{_apiUrl}/api/sources?pageSize=50&search={args.Filter}";
        using HttpClient client = ClientFactory.CreateClient();
        GetSourcesResponse? response = await client.GetFromJsonAsync<GetSourcesResponse>(url);
        if (response is not null)
        {
            _sources = response.Sources;
        }
    }

    private async Task OnLoadCategories(LoadDataArgs args)
    {
        string url = $"{_apiUrl}/api/categories/incomes?pageSize=50&search={args.Filter}";
        using HttpClient client = ClientFactory.CreateClient();
        GetCategoriesResponse? response = await client.GetFromJsonAsync<GetCategoriesResponse>(url);
        if (response is not null)
        {
            _categories = response.Categories;
        }
    }

    private async Task OnReceivedAfterChange(DateTime? _) => await ResetAndReload();

    private async Task OnReceivedBeforeChange(DateTime? _) => await ResetAndReload();

    private async Task OnMinAmountChange(decimal? _) => await ResetAndReload();

    private async Task OnMaxAmountChange(decimal? _) => await ResetAndReload();

    private async Task OnSourceChange(string _) => await ResetAndReload();

    private async Task OnCategoryChange(string _) => await ResetAndReload();

    private async Task OnDescriptionChange(string _) => await ResetAndReload();

    private async Task ResetAndReload()
    {
        Reset();
        await _grid.Reload();
    }

    private void Reset()
    {
        _incomesToInsert.Clear();
        _incomesToUpdate.Clear();
    }

    async Task SaveRow(IncomeModel income)
    {
        await _grid.UpdateRow(income);
    }

    void CancelEdit(IncomeModel income)
    {
        Reset();
        if (_editBackup is not null)
        {
            income.CopyFrom(_editBackup);
            _editBackup = null;
        }

        _grid.CancelEditRow(income);
    }

    async Task InsertRow()
    {
        Reset();
        IncomeModel income = new();
        _incomesToInsert.Add(income);
        _count++;
        await _grid.InsertRow(income);
    }

    private async Task OnCreateRow(IncomeModel income)
    {
        string url = $"{_apiUrl}/api/incomes";
        using HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage responseMessage = await client.PostAsJsonAsync(url, income.ToAddRequest());
        if (responseMessage.IsSuccessStatusCode)
        {
            string content = await responseMessage.Content.ReadAsStringAsync();
            AddIncomeResponse response = JsonSerializer
                .Deserialize<AddIncomeResponse>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;

            income.Id = response.Id;
        }
        else
        {
            _grid.CancelEditRow(income);
        }

        Reset();
    }

    private async Task EditRow(IncomeModel income)
    {
        Reset();
        _incomesToUpdate.Add(income);
        await _grid.EditRow(income);
        _editBackup = income.MakeCopy();
    }

    private async Task OnUpdateRow(IncomeModel income)
    {
        string url = $"{_apiUrl}/api/incomes/{income.Id}";
        using HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage responseMessage = await client.PatchAsJsonAsync(url, income.ToEditRequest());
        if (!responseMessage.IsSuccessStatusCode)
        {
            income.CopyFrom(_editBackup!);
            _grid.CancelEditRow(income);
        }

        _editBackup = null;
        Reset();
    }

    async Task DeleteRow(IncomeModel income)
    {
        bool? youSure = await DialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (youSure.HasValue == false || youSure.Value == false)
        {
            return;
        }

        Reset();
        if (string.IsNullOrWhiteSpace(income.Id))
        {
            _grid.CancelEditRow(income);
        }
        else
        {
            using HttpClient client = ClientFactory.CreateClient();
            await client.DeleteAsync($"{_apiUrl}/api/incomes/{income.Id}");
            await _grid.Reload();
        }
    }

    private static decimal ConvertDecimal(string arg)
    {
        return decimal.TryParse(arg.Replace(",", "."), CultureInfo.InvariantCulture, out var result)
            ? result
            : default;
    }

    private static decimal? ConvertOptionalDecimal(string? arg)
    {
        return arg is null ? null : ConvertDecimal(arg);
    }
}
