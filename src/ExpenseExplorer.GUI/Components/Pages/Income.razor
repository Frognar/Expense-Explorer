@page "/income"
@using ExpenseExplorer.API.Contract.ReadModel
@using ExpenseExplorer.GUI.Helpers
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

<PageTitle>Income</PageTitle>

<RadzenDataGrid
    @ref="_grid"
    Data="@_incomes"
    Count="@_count"
    TItem="IncomeResponse"
    LoadData="@LoadData"
    AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Center"
    PageSizeOptions="@_pageSizeOptions"
    ShowPagingSummary="true"
    PagingSummaryFormat="Displaying page {0} of {1} <b>(total {2} records)</b>"
    AllowSorting="true"
    AllowFiltering="true"
    FilterMode="FilterMode.Simple"
    IsLoading=@_isLoading
    Density="Density.Compact">
    <Columns>
        <RadzenDataGridColumn TItem="IncomeResponse" Property="Source" Title="Source">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Source">
                    <RadzenTextBox @bind-Value=@_source Change="OnSourceChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeResponse" Property="Amount" Title="Amount">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Min amount">
                    <RadzenNumeric
                        ShowUpDown="false"
                        TValue="decimal?"
                        @bind-Value=@_minAmount
                        Change="OnMinAmountChange"/>
                </RadzenFormField>
                <RadzenFormField AllowFloatingLabel="false" Text="Max amount">
                    <RadzenNumeric
                        ShowUpDown="false"
                        TValue="decimal?"
                        @bind-Value=@_maxAmount
                        Change="OnMaxAmountChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeResponse" Property="Category" Title="Category">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Category">
                    <RadzenTextBox @bind-Value=@_category Change="OnCategoryChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeResponse" Property="ReceivedDate" Title="Received date">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Received after">
                    <RadzenDatePicker
                        @bind-Value=@_receivedAfter
                        DateFormat="dd.MM.yyyy"
                        Change="OnReceivedAfterChange"/>
                </RadzenFormField>
                <RadzenFormField AllowFloatingLabel="false" Text="Received before">
                    <RadzenDatePicker
                        @bind-Value=@_receivedBefore
                        DateFormat="dd.MM.yyyy"
                        Change="OnReceivedBeforeChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeResponse" Property="Description" Title="Description">
            <FilterTemplate>
                <RadzenFormField AllowFloatingLabel="false" Text="Description">
                    <RadzenTextBox @bind-Value=@_description Change="OnDescriptionChange"/>
                </RadzenFormField>
            </FilterTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code
{
    private readonly IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    private RadzenDataGrid<IncomeResponse> _grid = default!;
    private IEnumerable<IncomeResponse> _incomes = default!;
    private int _count;
    private bool _isLoading;
    private DateTime? _receivedAfter;
    private DateTime? _receivedBefore;
    private decimal? _minAmount;
    private decimal? _maxAmount;
    private string? _source;
    private string? _category;
    private string? _description;

    private async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        string url = $"http://localhost:5163/api/incomes?{GetParameters(args)}";
        using HttpClient client = ClientFactory.CreateClient();
        GetIncomesResponse? response = await client.GetFromJsonAsync<GetIncomesResponse>(url);
        if (response is not null)
        {
            _count = response.FilteredCount;
            _incomes = response.Incomes;
        }

        _isLoading = false;
    }

    private string GetParameters(LoadDataArgs args)
    {
        QueryParameters parameters = new();
        (int pageNumber, int pageSize) = args.GetPagingParameters();
        parameters.Add(pageNumber, "pageNumber");
        parameters.Add(pageSize, "pageSize");
        (string? sortBy, string? sortOrder) = args.GetOrderByParameters();
        parameters.Add(sortBy, "sortBy");
        parameters.Add(sortOrder, "sortOrder");
        parameters.Add(_minAmount, "minAmount");
        parameters.Add(_maxAmount, "maxAmount");
        parameters.Add(_receivedAfter, "receivedAfter");
        parameters.Add(_receivedBefore, "receivedBefore");
        parameters.Add(_source, "source");
        parameters.Add(_category, "category");
        parameters.Add(_description, "description");
        return parameters.ToString();
    }

    private async Task OnReceivedAfterChange(DateTime? _) => await _grid.Reload();

    private async Task OnReceivedBeforeChange(DateTime? _) => await _grid.Reload();

    private async Task OnMinAmountChange(decimal? _) => await _grid.Reload();

    private async Task OnMaxAmountChange(decimal? _) => await _grid.Reload();

    private async Task OnSourceChange(string _) => await _grid.Reload();

    private async Task OnCategoryChange(string _) => await _grid.Reload();

    private async Task OnDescriptionChange(string _) => await _grid.Reload();
}
