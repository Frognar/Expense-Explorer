@page "/receipts/new"
@using ExpenseExplorer.WebApp.Helpers
@using ExpenseExplorer.WebApp.Services
@inject ReceiptService ReceiptService
@inject IStringLocalizer<NewReceipt> Localizer
@inject NavigationManager NavigationManager
@inject DialogService DialogService

<RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 420px">
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="@Localizer["Store"]">
            <RadzenAutoComplete @bind-Value="@_store" Data="_stores" OpenOnFocus="true" LoadData="OnLoadData"/>
        </RadzenFormField>
        <RadzenFormField Text="@Localizer["PurchaseDate"]">
            <RadzenDatePicker @bind-Value="@_purchaseDate"/>
        </RadzenFormField>
        <RadzenRow JustifyContent="JustifyContent.SpaceBetween">
            <RadzenButton Text="@Localizer["Cancel"]" Icon="highlight_off" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Danger" Click="@OnCancel" />
            <RadzenButton Text="@Localizer["Save"]" Icon="check_circle" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Success" Click="@OnSave" />
        </RadzenRow>
    </RadzenStack>
</RadzenCard>

@code {
    private string _store = "";
    private DateOnly _purchaseDate = DateOnly.FromDateTime(DateTime.Today);
    private IEnumerable<string> _stores = [];

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        _stores = await ReceiptService.GetStores();
        await base.OnInitializedAsync();
    }

    private async Task OnLoadData(LoadDataArgs args)
    {
        _stores = await ReceiptService.GetStores(args.Filter);
    }

    private void OnCancel() => NavigationManager.NavigateTo("/");

    private async Task OnSave()
    {
        Result<Guid, string> result = await ReceiptService.CreateReceiptAsync(_store, _purchaseDate);
        await result
            .MatchAsync(
                id => NavigateTo($"/receipts/{id}"),
                BusyDialog);
    }

    private Unit NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
        return Unit.Instance;
    }

    private async Task<Unit> BusyDialog(string message)
    {
        _ = InvokeAsync(async () =>
        {
            await Task.Delay(2000);
            DialogService.Close();
        });
        
        await DialogService.OpenAsync("", _ =>
        {
            return b =>
            {
                b.OpenElement(0, "RadzenRow");
                b.OpenElement(1, "RadzenColumn");
                b.AddAttribute(2, "Size", "12");
                b.AddContent(3, message);
                b.CloseElement();
                b.CloseElement();
            };
            
        }, new DialogOptions
        {
            ShowTitle = false,
            Style = "min-height:auto;min-width:auto;width:auto",
            CloseDialogOnEsc = false
        });

        return Unit.Instance;
    }
}