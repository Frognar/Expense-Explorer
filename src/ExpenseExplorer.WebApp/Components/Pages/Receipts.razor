@page "/"
@using DotResult
@using ExpenseExplorer.Application
@using ExpenseExplorer.WebApp.Models
@using ExpenseExplorer.WebApp.Services
@inject IStringLocalizer<Receipts> Localizer
@inject ReceiptService ReceiptService
@inject NavigationManager NavigationManager

<PageTitle>@Localizer["_Title"]</PageTitle>

<RadzenDataGrid
    @ref=_grid
    Data="@_receiptDetails"
    Count="@_count"
    LoadData="@LoadData"
    Density="Density.Compact"
    PageSize="20"
    AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Center"
    ShowPagingSummary="true"
    PageSizeOptions="[10, 20]"
    PageSizeText="@Localizer["Items per page"]"
    EmptyText="@Localizer["No receipts to display"]"
    AllowFiltering="true"
    FilterMode="FilterMode.Simple"
    AllowSorting="true"
    GotoFirstPageOnSort="true">
    <PagingSummaryTemplate>
        @((MarkupString)string.Format(Localizer["Page x of y (z items total)"], context.CurrentPage, context.NumberOfPages, context.TotalCount))
    </PagingSummaryTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(ReceiptDetails.Store)" Title="@Localizer["Store"]">
            <FilterTemplate>
                <RadzenDropDown @bind-Value="@_selectedStores" Data="@_stores" AllowVirtualization="true" AllowFiltering="true" AllowClear="true" Multiple="true" Chips="true" SelectedItemsText="@Localizer["SelectedItemsText"]" Change="@Reload" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width:100%"/>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn
            Property="@nameof(ReceiptDetails.PurchaseDate)"
            FormatString="{0:dd/MM/yyyy}"
            Title="@Localizer["Purchase date"]"
            SortOrder="SortOrder.Descending">
            <FilterTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenLabel Text="@($"{Localizer["From"]}: ")" Component="PurchaseDateFromDatePicker"/>
                    <RadzenDatePicker TValue="DateOnly?" @bind-Value="@_purchaseDateFrom" AllowClear="true" Name="PurchaseDateFromDatePicker" Change="@Reload"/>
                    <RadzenLabel Text="@($"{Localizer["To"]}: ")" Component="PurchaseDateToDatePicker"/>
                    <RadzenDatePicker TValue="DateOnly?" @bind-Value="@_purchaseDateTo" AllowClear="true" Name="PurchaseDateToDatePicker" Change="@Reload"/>
                </RadzenStack>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ReceiptDetails.TotalCost)" Title="@Localizer["Total cost"]">
            <Template>
                @string.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", context.TotalCost)
            </Template>
            <FooterTemplate>
                @Localizer["Total cost"]: <b>@string.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", _totalCost)</b>
            </FooterTemplate>
            <FilterTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenLabel Text="@($"{Localizer["Min"]}: ")" Component="TotalCostMinDatePicker"/>
                    <RadzenNumeric TValue="decimal?" @bind-Value="@_totalCostMin" ShowUpDown="false" Name="TotalCostMinDatePicker" Change="@Reload"/>
                    <RadzenLabel Text="@($"{Localizer["Max"]}: ")" Component="TotalCostMaxDatePicker"/>
                    <RadzenNumeric TValue="decimal?" @bind-Value="@_totalCostMax" ShowUpDown="false" Name="TotalCostMaxDatePicker" Change="@Reload"/>
                </RadzenStack>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ReceiptDetails.Id)" Filterable="false" Sortable="false" Width="145px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenButton Icon="add" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Success" Text="@Localizer["New receipt"]" Click="@OnCreate" />
            </HeaderTemplate>
            <Template>
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" Click="@(() => OnEdit(context.Id))"/>
                <RadzenButton Icon="library_add" Size="ButtonSize.Small" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" Click="@(() => OnCopy(context.Id))"/>
                <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Danger" Click="@(() => Delete(context))"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<Toast @ref="@_toast"/>
<ConfirmationDialog @ref="@_confirmationDialog"/>

@code {
    private RadzenDataGrid<ReceiptDetails> _grid = null!;
    private int _count;
    private decimal _totalCost = decimal.Zero;
    private IEnumerable<ReceiptDetails> _receiptDetails = null!;

    // Filters
    private IEnumerable<string> _stores = [];
    private IEnumerable<string>? _selectedStores;
    private DateOnly? _purchaseDateFrom = DateOnly.FromDateTime(DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-1));
    private DateOnly? _purchaseDateTo;
    private decimal? _totalCostMin;
    private decimal? _totalCostMax;

    private Toast _toast = null!;
    private ConfirmationDialog _confirmationDialog = null!;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        _stores = await ReceiptService.GetStoresAsync();
        await base.OnInitializedAsync();
    }

    private async Task Reload() => await _grid.FirstPage(forceReload: true);
    
    private async Task LoadData(LoadDataArgs args)
    {
        (_receiptDetails, _count, _totalCost) = await ReceiptService.GetReceiptsAsync(
            args.Top.GetValueOrDefault(10),
            args.Skip.GetValueOrDefault(),
            args.OrderBy,
            _selectedStores ?? [],
            _purchaseDateFrom,
            _purchaseDateTo,
            _totalCostMin,
            _totalCostMax);
    }

    private void OnCreate() => NavigationManager.NavigateTo("/receipts/new");
    private void OnEdit(Guid id) => NavigationManager.NavigateTo($"/receipts/{id}");

    private async Task OnCopy(Guid id)
    {
        Result<Guid> result = await ReceiptService.DuplicateReceipt(id);
        await result.MatchAsync(
            error => _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code]))),
            async receiptId =>
        {
            await _toast.OpenAsync("Copied");
            NavigationManager.NavigateTo($"/receipts/{receiptId}");
            return Unit.Instance;
        });
    }

    private async Task Delete(ReceiptDetails receipt)
    {
        if (!await _confirmationDialog.IsConfirmed())
        {
            return;
        }

        Result<Unit> result = await ReceiptService.DeleteReceiptAsync(receipt.Id);
        await result.MatchAsync(
            error => _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code]))),
            unit =>
        {
            _grid.Reload();
            return Task.FromResult(unit);
        });
    }
}