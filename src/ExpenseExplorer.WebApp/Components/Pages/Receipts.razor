@page "/"
@inject IStringLocalizer<Receipts> Localizer

<PageTitle>@Localizer["_Receipts"]</PageTitle>

<h3>@Localizer["_Receipts"]</h3>

<RadzenDataGrid
    @ref=_grid
    Data="@_receiptDetails"
    Count="@_count"
    LoadData="@LoadData"
    Style="height: 400px"
    AllowPaging="true"
    AllowFiltering="true"
    FilterMode="FilterMode.Simple"
    AllowSorting="true"
    GotoFirstPageOnSort="true">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.Id)" Title="@Localizer["Id"]" Visible="false" />
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.Store)" Title="@Localizer["Store"]">
            
        </RadzenDataGridColumn>
        <RadzenDataGridColumn
            Property="@nameof(ReceiptDetail.PurchaseDate)"
            FormatString="{0:dd/MM/yyyy}"
            Title="@Localizer["PurchaseDate"]"
            SortOrder="SortOrder.Descending">
            <FilterTemplate>
                <RadzenLabel Text="@($"{Localizer["From"]}: ")" Component="PurchaseDateFromDatePicker" />
                <RadzenDatePicker TValue="DateOnly?" @bind-Value="@_purchaseDateFrom" AllowClear="true" Name="PurchaseDateFromDatePicker" Change="@Reload" />
                <RadzenLabel Text="@($"{Localizer["To"]}: ")" Component="PurchaseDateToDatePicker" />
                <RadzenDatePicker TValue="DateOnly?" @bind-Value="@_purchaseDateTo" AllowClear="true" Name="PurchaseDateToDatePicker" Change="@Reload" />
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.TotalCost)" Title="@Localizer["TotalCost"]">
            <FilterTemplate>
                <RadzenLabel Text="@($"{Localizer["From"]}: ")" Component="TotalCostFromDatePicker" />
                <RadzenNumeric TValue="decimal?" @bind-Value="@_totalCostFrom" ShowUpDown="false" Name="TotalCostFromDatePicker" Change="@Reload" />
                <RadzenLabel Text="@($"{Localizer["To"]}: ")" Component="TotalCostToDatePicker" />
                <RadzenNumeric TValue="decimal?" @bind-Value="@_totalCostTo" ShowUpDown="false" Name="TotalCostToDatePicker" Change="@Reload" />
            </FilterTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<ReceiptDetail> _grid = null!;
    private int _count;
    private IEnumerable<ReceiptDetail> _receiptDetails = null!;

    // Filters
    DateOnly? _purchaseDateFrom = DateOnly.FromDateTime(DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-1));
    DateOnly? _purchaseDateTo;
    decimal? _totalCostFrom;
    decimal? _totalCostTo;

    private async Task Reload() => await _grid.FirstPage(forceReload: true);
    
    private async Task LoadData(LoadDataArgs args)
    {
        (_receiptDetails, _count) = await GetData(
            _purchaseDateFrom,
            _purchaseDateTo,
            _totalCostFrom,
            _totalCostTo,
            args.OrderBy,
            args.Skip.GetValueOrDefault(),
            args.Top.GetValueOrDefault(10));
    }

    private async Task<ReceiptDetailsResponse> GetData(
        DateOnly? purchaseDateMin,
        DateOnly? purchaseDateMax,
        decimal? totalCostMin,
        decimal? totalCostMax,
        string? orderBy,
        int skip,
        int take)
    {
        await Task.Yield();
        var query = Enumerable.Range(1, 10000)
            .Select(x => new ReceiptDetail
            {
                Id = x,
                PurchaseDate = DateOnly.FromDateTime(DateTime.Today.AddDays(-x)),
                Store = "Store " + x,
                TotalCost = x * 10m
            })
            .AsQueryable()
            .Where(r 
                => r.PurchaseDate >= purchaseDateMin.GetValueOrDefault(DateOnly.MinValue)
                && r.PurchaseDate <= purchaseDateMax.GetValueOrDefault(DateOnly.MaxValue)
                && r.TotalCost >= totalCostMin.GetValueOrDefault(decimal.MinValue)
                && r.TotalCost <= totalCostMax.GetValueOrDefault(decimal.MaxValue));

        var receiptsCount = query.Count();
        if (!string.IsNullOrWhiteSpace(orderBy))
        {
            query = query.OrderBy(orderBy);
        }

        var data = query.Skip(skip).Take(take).ToList();
        return new ReceiptDetailsResponse(data, receiptsCount);
    }

    public sealed record ReceiptDetailsResponse(
        IEnumerable<ReceiptDetail> Receipts,
        int Count);

    public sealed class ReceiptDetail
    {
        public required int Id { get; set; }
        public required string Store { get; set; }
        public required DateOnly PurchaseDate { get; set; }
        public required decimal TotalCost { get; set; }
    }
}