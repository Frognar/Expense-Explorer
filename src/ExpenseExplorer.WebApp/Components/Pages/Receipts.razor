@page "/"
@inject IStringLocalizer<Receipts> Localizer

<PageTitle>@Localizer["_Receipts"]</PageTitle>

<h3>@Localizer["_Receipts"]</h3>

<RadzenDataGrid
    @ref=grid
    Data="@receiptDetails"
    Count="@count"
    LoadData="@LoadData"
    AllowVirtualization="true"
    Style="height: 400px"
    AllowFiltering="true"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    LogicalFilterOperator="LogicalFilterOperator.And"
    AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.Id)" Title="@Localizer["Id"]" Visible="false" />
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.Store)" Title="@Localizer["Store"]" />
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.PurchaseDate)" FormatString="{0:dd/MM/yyyy}" Title="@Localizer["PurchaseDate"]" SortOrder="SortOrder.Descending" />
        <RadzenDataGridColumn Property="@nameof(ReceiptDetail.TotalCost)" Title="@Localizer["TotalCost"]" />
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<ReceiptDetail> grid = null!;
    private int count;
    IEnumerable<ReceiptDetail> receiptDetails = null!;

    string lastfilter = null!;
    private async Task LoadData(LoadDataArgs args)
    {
        await Task.Yield();
        if (!string.IsNullOrEmpty(args.Filter) && lastfilter != args.Filter)
        {
            args.Skip = 0;
        }

        var query = Enumerable.Range(1, 10000)
            .Select(x => new ReceiptDetail
            {
                Id = x,
                PurchaseDate = DateTime.Today.AddDays(-x),
                Store = "Store " + x,
                TotalCost = x * 10m
            })
            .AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            lastfilter = args.Filter;
            query = query.Where(grid.ColumnsCollection);
            count = await Task.FromResult(query.Count());
        }
        else
        {
            count = await Task.FromResult(query.Count());
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        receiptDetails = await Task.FromResult(query.Skip(args.Skip!.Value).Take(args.Top!.Value).ToList());
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return base.OnAfterRenderAsync(firstRender);
        }

        RadzenDataGridColumn<ReceiptDetail>? column = grid.ColumnsCollection.FirstOrDefault(c => c.Property == nameof(ReceiptDetail.PurchaseDate));
        if (column == null)
        {
            return base.OnAfterRenderAsync(firstRender);
        }

        column.SetFilterValue(DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-1));
        column.SetFilterOperator(FilterOperator.GreaterThanOrEquals);
        grid.Reload();

        return base.OnAfterRenderAsync(firstRender);
    }

    public sealed class ReceiptDetail
    {
        public required int Id { get; set; }
        public required string Store { get; set; }
        public required DateTime PurchaseDate { get; set; }
        public required decimal TotalCost { get; set; }
    }
}