@page "/Receipts/{receiptId:guid}"
@using System.Globalization
@using DotMaybe
@using DotResult
@using ExpenseExplorer.Application
@using ExpenseExplorer.WebApp.Models
@using ExpenseExplorer.WebApp.Services
@inject IStringLocalizer<Receipt> Localizer
@inject ReceiptService ReceiptService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>@Localizer["_Title"]</PageTitle>

<RadzenCard Variant="Variant.Outlined" class="rz-my-2 rz-mx-auto">
    <RadzenRow JustifyContent="JustifyContent.Center">
        <RadzenFormField Text="@Localizer["Store"]">
            <RadzenAutoComplete @bind-Value="@_store" Data="_stores" OpenOnFocus="true" LoadData="OnStoresLoadData" @onfocusout="@SaveReceipt"/>
        </RadzenFormField>
        <RadzenFormField Text="@Localizer["Purchase date"]">
            <RadzenDatePicker @bind-Value="@_purchaseDate" @onfocusout="@SaveReceipt"/>
        </RadzenFormField>
        <RadzenFormField Text="@Localizer["Total cost"]">
            <RadzenTextBox Disabled="true" Value="@TotalCost.ToString("C2", new CultureInfo("pl-PL"))"/>
        </RadzenFormField>
    </RadzenRow>
</RadzenCard>

<RadzenDataGrid
    @ref="_grid"
    Data="@_purchases"
    TItem="PurchaseDetails"
    Count="@_count"
    Density="Density.Compact"
    AllowSorting="true"
    EditMode="DataGridEditMode.Single"
    EmptyText="@Localizer["No receipt items to display"]"
    RowUpdate="@OnUpdateRow"
    Responsive="true">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.ItemName)" Title="@Localizer["Item name"]">
            <EditTemplate Context="purchase">
                <RadzenAutoComplete @bind-Value="@purchase.ItemName" Data="_items" OpenOnFocus="true"
                                    LoadData="OnItemsLoadData"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Category)" Title="@Localizer["Category"]">
            <EditTemplate Context="purchase">
                <RadzenAutoComplete @bind-Value="@purchase.Category" Data="_categories" OpenOnFocus="true"
                                    LoadData="OnCategoriesLoadData"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Quantity)" Title="@Localizer["Quantity"]">
            <Template>
                @(context.Quantity == Math.Truncate(context.Quantity)
                    ? string.Format(new CultureInfo("pl-PL"), "{0:N0}", context.Quantity)
                    : string.Format(new CultureInfo("pl-PL"), "{0:F3}", context.Quantity))
            </Template>
            <EditTemplate>
                <RadzenNumeric ConvertValue="ConvertDecimal" @bind-Value="@context.Quantity" ShowUpDown="false"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.UnitPrice)" Title="@Localizer["Unit price"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.UnitPrice)
            </Template>
            <EditTemplate>
                <RadzenNumeric ConvertValue="ConvertDecimal" @bind-Value="@context.UnitPrice" ShowUpDown="false"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.PriceBeforeDiscount)"
                              Title="@Localizer["Price before discount"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.PriceBeforeDiscount)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Discount)" Title="@Localizer["Discount"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.Discount)
            </Template>
            <EditTemplate>
                <RadzenNumeric ConvertValue="ConvertOptionalDecimal" @bind-Value="@context.Discount" ShowUpDown="false"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.PriceAfterDiscount)"
                              Title="@Localizer["Price after discount"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.PriceAfterDiscount)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Description)" Title="@Localizer["Description"]">
            <EditTemplate>
                <RadzenTextArea @bind-Value="@context.Description"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Id)" Filterable="false" Sortable="false" Width="150px"
                              TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" JustifyContent="JustifyContent.Center">
                    <RadzenButton Icon="add" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"
                                  ButtonStyle="ButtonStyle.Success" Text="@Localizer["Add item"]" Click="@InsertRow"/>
                    <RadzenButton Icon="download" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"
                                  ButtonStyle="ButtonStyle.Primary" Text="@Localizer["Export"]" Click="@ExportReceipt"/>
                </RadzenStack>
            </HeaderTemplate>
            <Template Context="purchase">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"
                              ButtonStyle="ButtonStyle.Light" Click="@(_ => EditRow(purchase))"/>
                <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"
                              ButtonStyle="ButtonStyle.Danger" Click="@(_ => Delete(purchase))"/>
            </Template>
            <EditTemplate Context="purchase">
                <RadzenButton Icon="check" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"
                              ButtonStyle="ButtonStyle.Success" Click="@(_ => SaveRow(purchase))"/>
                <RadzenButton Icon="close" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"
                              ButtonStyle="ButtonStyle.Light" Click="@(_ => CancelEdit(purchase))"/>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<Toast @ref="@_toast"/>
<ConfirmationDialog @ref="@_confirmationDialog"/>

@code
{
    /// <summary>
    /// The unique identifier for the receipt being viewed or edited.
    /// </summary>
    /// <remarks>
    /// This parameter is required and is passed via the route. It is used to fetch the receipt
    /// details and associated purchases from the database.
    /// </remarks>
    [Parameter]
    public required Guid ReceiptId { get; set; }

    private RadzenDataGrid<PurchaseDetails> _grid = null!;

    private ReceiptWithPurchases? _receipt;
    private string _store = "";
    private DateOnly _purchaseDate;
    private int _count;
    private decimal TotalCost => _purchases.Sum(p => p.PriceAfterDiscount);
    private IEnumerable<string> _stores = [];
    private IEnumerable<string> _items = [];
    private IEnumerable<string> _categories = [];
    private IEnumerable<PurchaseDetails> _purchases = [];

    private PurchaseDetails? _backup;
    private Toast _toast = null!;
    private ConfirmationDialog _confirmationDialog = null!;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        Result<Maybe<ReceiptWithPurchases>> receiptResult = await ReceiptService.GetReceiptAsync(ReceiptId);
        receiptResult.Match(_ =>
        {
            NavigationManager.NavigateTo("/");
            return Unit.Instance;
        }, maybe => maybe.Match(() =>
            {
                NavigationManager.NavigateTo("/");
                return Unit.Instance;
            },
            receipt =>
            {
                _receipt = receipt;
                return Unit.Instance;
            }));

        _stores = await ReceiptService.GetStoresAsync();
        _items = await ReceiptService.GetItemsAsync();
        _categories = await ReceiptService.GetCategoriesAsync();
        _store = _receipt?.Store ?? "";
        _purchaseDate = _receipt?.PurchaseDate ?? DateOnly.FromDateTime(DateTime.Today);
        _count = _receipt?.Purchases.Count() ?? 0;
        _purchases = _receipt?.Purchases ?? [];
        await base.OnInitializedAsync();
    }

    private async Task OnStoresLoadData(LoadDataArgs args)
    {
        _stores = await ReceiptService.GetStoresAsync(args.Filter);
    }

    private async Task OnItemsLoadData(LoadDataArgs args)
    {
        _items = await ReceiptService.GetItemsAsync(args.Filter);
    }

    private async Task OnCategoriesLoadData(LoadDataArgs args)
    {
        _categories = await ReceiptService.GetCategoriesAsync(args.Filter);
    }

    private async Task SaveReceipt()
    {
        if (_receipt is null)
        {
            return;
        }

        Result<Unit> result = await ReceiptService.UpdateReceiptAsync(_receipt.Id, _store, _purchaseDate);
        await result.MatchAsync(async error =>
            {
                _store = _receipt.Store;
                _purchaseDate = _receipt.PurchaseDate;
                return await _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code])));
            },
            unit =>
            {
                _receipt = _receipt with
                    {
                        Store = _store,
                        PurchaseDate = _purchaseDate
                    };

                return Task.FromResult(unit);
            });
    }

    private async Task InsertRow()
    {
        if (!_grid.IsValid)
        {
            return;
        }

        if (_purchases.Any(p => p.Id == Guid.Empty))
        {
            return;
        }

        PurchaseDetails purchase = new(Guid.Empty, "", "", 0, 0, null, null);
        _purchases = _purchases.Prepend(purchase);
        _count = _purchases.Count();
        await _grid.EditRow(purchase);
    }

    private async Task EditRow(PurchaseDetails purchase)
    {
        if (!_grid.IsValid)
        {
            return;
        }

        _backup = purchase.MakeCopy();
        await _grid.EditRow(purchase);
    }

    async Task SaveRow(PurchaseDetails purchase)
    {
        await _grid.UpdateRow(purchase);
    }

    private void CancelEdit(PurchaseDetails purchase)
    {
        _grid.CancelEditRow(purchase);

        if (purchase.Id == Guid.Empty)
        {
            _purchases = _purchases.Where(p => p.Id != Guid.Empty).ToList();
            _count = _purchases.Count();
        }
        else if (_backup is not null)
        {
            purchase.Update(_backup);
        }
        
        StateHasChanged();
    }

    private async Task OnUpdateRow(PurchaseDetails purchase)
    {
        if (purchase.Id == Guid.Empty)
        {
            var result = await ReceiptService.AddPurchase(ReceiptId, purchase);
            await result.MatchAsync(
                async error =>
                {
                    await _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code])));
                    await _grid.EditRow(purchase);
                    return Unit.Instance;
                },
                purchaseId =>
                {
                    purchase.Id = purchaseId;
                    return Task.FromResult(Unit.Instance);
                });
        }
        else
        {
            var result = await ReceiptService.UpdatePurchase(ReceiptId, purchase);
            await result.MatchAsync(
                async error =>
                {
                    await _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code])));
                    await _grid.EditRow(purchase);
                    return Unit.Instance;
                },
                unit =>
                {
                    _purchases = ReplaceInline(_purchases, purchase);
                    return Task.FromResult(unit);
                });
        }
    }

    private static IEnumerable<PurchaseDetails> ReplaceInline(
        IEnumerable<PurchaseDetails> purchases,
        PurchaseDetails purchase)
    {
        foreach (PurchaseDetails purchaseDetails in purchases)
        {
            if (purchaseDetails.Id == purchase.Id)
            {
                yield return purchase;
            }
            else
            {
                yield return purchaseDetails;
            }
        }
    }

    private async Task Delete(PurchaseDetails purchase)
    {
        if (!await _confirmationDialog.IsConfirmed())
        {
            return;
        }

        Result<Unit> result = await ReceiptService.DeletePurchaseAsync(ReceiptId, purchase.Id);
        await result.MatchAsync(
            error => _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code]))),
            unit =>
            {
                _purchases = _purchases.Where(p => p.Id != purchase.Id);
                return Task.FromResult(unit);
            });
    }

    private static decimal ConvertDecimal(string arg)
    {
        return decimal.TryParse(arg.Replace(",", "."), CultureInfo.InvariantCulture, out decimal result)
            ? result
            : Decimal.Zero;
    }

    private static decimal? ConvertOptionalDecimal(string? arg)
    {
        return arg is null ? null : ConvertDecimal(arg);
    }

    private async Task ExportReceipt()
    {
        var result = await ReceiptService.GetReceiptAsync(ReceiptId);
        await result.MatchAsync(
            async error =>
            {
                await _toast.OpenAsync(string.Join(Environment.NewLine, error.Select(e => Localizer[e.Code])));
                return Unit.Instance;
            },
            async maybe =>
            {
                return await maybe.MatchAsync(
                    none: async () =>
                    {
                        await _toast.OpenAsync(string.Join(Environment.NewLine, Localizer["RECEIPT_NOT_FOUND"]));
                        return Unit.Instance;
                    },
                    some: async receipt =>
                    {
                        var csv = receipt.ToCsv();
                        var fileName = $"{receipt.Store}-{receipt.PurchaseDate:yyyy-MM-dd}.csv";
                        await JsRuntime.InvokeVoidAsync("downloadFile", fileName, "text/csv", csv);
                        return Unit.Instance;
                    });
            });
    }
}