@page "/Receipts/{receiptId:guid}"
@using System.Globalization
@using ExpenseExplorer.Application
@using ExpenseExplorer.WebApp.Helpers
@using ExpenseExplorer.WebApp.Models
@using ExpenseExplorer.WebApp.Services
@inject IStringLocalizer<Receipt> Localizer
@inject ReceiptService ReceiptService
@inject NavigationManager NavigationManager

<PageTitle>@Localizer["_Receipt"]</PageTitle>
<RadzenCard Variant="Variant.Outlined" class="rz-my-2 rz-mx-auto">
    <RadzenRow JustifyContent="JustifyContent.Center">
        <RadzenFormField Text="@Localizer["Store"]">
            <RadzenAutoComplete @bind-Value="@_store" Data="_stores" OpenOnFocus="true" LoadData="OnStoresLoadData"/>
        </RadzenFormField>
        <RadzenFormField Text="@Localizer["PurchaseDate"]">
            <RadzenDatePicker @bind-Value="@_purchaseDate"/>
        </RadzenFormField>
        <RadzenFormField Text="@Localizer["TotalCost"]">
            <RadzenTextBox Disabled="true" Value="@TotalCost.ToString("C2", new CultureInfo("pl-PL"))"/>
        </RadzenFormField>
    </RadzenRow>
</RadzenCard>

<RadzenDataGrid
    @ref="_grid"
    Data="@_purchases"
    TItem="PurchaseDetails"
    Count="@_count"
    Density="Density.Compact"
    PagerHorizontalAlign="HorizontalAlign.Center"
    AllowSorting="true"
    EditMode="DataGridEditMode.Single"
    RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.ItemName)" Title="@Localizer["ItemName"]">
            <EditTemplate Context="purchase">
                <RadzenAutoComplete @bind-Value="@purchase.ItemName" Data="_items" OpenOnFocus="true" LoadData="OnItemsLoadData"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Category)" Title="@Localizer["Category"]">
            <EditTemplate Context="purchase">
                <RadzenAutoComplete @bind-Value="@purchase.Category" Data="_categories" OpenOnFocus="true" LoadData="OnCategoriesLoadData"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Quantity)" Title="@Localizer["Quantity"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:F3}", context.Quantity)
            </Template>
            <EditTemplate>
                <RadzenNumeric @bind-Value="@context.Quantity" ShowUpDown="false"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.UnitPrice)" Title="@Localizer["UnitPrice"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.UnitPrice)
            </Template>
            <EditTemplate>
                <RadzenNumeric @bind-Value="@context.UnitPrice" ShowUpDown="false"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.PriceBeforeDiscount)" Title="@Localizer["PriceBeforeDiscount"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.PriceBeforeDiscount)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Discount)" Title="@Localizer["Discount"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.Discount)
            </Template>
            <EditTemplate>
                <RadzenNumeric @bind-Value="@context.Discount" ShowUpDown="false"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.PriceAfterDiscount)" Title="@Localizer["PriceAfterDiscount"]">
            <Template>
                @string.Format(new CultureInfo("pl-PL"), "{0:C}", context.PriceAfterDiscount)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Description)" Title="@Localizer["Description"]">
            <EditTemplate>
                <RadzenTextArea @bind-Value="@context.Description"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PurchaseDetails.Id)" Filterable="false" Sortable="false" Width="150px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenButton Icon="add" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Success" Text="@Localizer["AddItem"]" Click="@InsertRow" />
            </HeaderTemplate>
            <Template Context="purchase">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Light" Click="@(_ => EditRow(purchase))"/>
                <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Danger" Click="@(_ => Delete(purchase))"/>
            </Template>
            <EditTemplate Context="purchase">
                <RadzenButton Icon="check" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Success" Click="@(_ => SaveRow(purchase))"/>
                <RadzenButton Icon="close" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Light" Click="@(_ => CancelEdit(purchase))"/>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<Toast @ref="@_toast"/>
<ConfirmationDialog @ref="@_confirmationDialog"/>

@code
{
    [Parameter] public required Guid ReceiptId { get; set; }
    private RadzenDataGrid<PurchaseDetails> _grid = null!;

    private ReceiptWithPurchases? _receipt;
    private string _store = "";
    private DateOnly _purchaseDate;
    private int _count;
    private decimal TotalCost => _purchases.Sum(p => p.PriceAfterDiscount);
    private IEnumerable<string> _stores = [];
    private IEnumerable<string> _items = [];
    private IEnumerable<string> _categories = [];
    private IEnumerable<PurchaseDetails> _purchases = [];
    
    private PurchaseDetails? _backup;
    private Toast _toast = null!;
    private ConfirmationDialog _confirmationDialog = null!;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        Result<ReceiptWithPurchases, string> receiptResult = await ReceiptService.GetReceiptAsync(ReceiptId);
        receiptResult.Match(_ =>
        {
            NavigationManager.NavigateTo("/");
            return Unit.Instance;
        }, receipt =>
        {
            _receipt = receipt;
            return Unit.Instance;
        });

        _stores = await ReceiptService.GetStoresAsync();
        _items = await ReceiptService.GetItemsAsync();
        _categories = await ReceiptService.GetCategoriesAsync();
        _store = _receipt?.Store ?? "";
        _purchaseDate = _receipt?.PurchaseDate ?? DateOnly.FromDateTime(DateTime.Today);
        _count = _receipt?.Purchases.Count() ?? 0;
        _purchases = _receipt?.Purchases ?? [];
        await base.OnInitializedAsync();
    }

    private async Task OnStoresLoadData(LoadDataArgs args)
    {
        _stores = await ReceiptService.GetStoresAsync(args.Filter);
    }

    private async Task OnItemsLoadData(LoadDataArgs args)
    {
        _items = await ReceiptService.GetItemsAsync(args.Filter);
    }

    private async Task OnCategoriesLoadData(LoadDataArgs args)
    {
        _categories = await ReceiptService.GetCategoriesAsync(args.Filter);
    }

    private async Task InsertRow()
    {
        if (!_grid.IsValid)
        {
            return;
        }

        PurchaseDetails purchase = new(Guid.CreateVersion7(), "", "", 0, 0, null, null);
        _count++;
        await _grid.InsertRow(purchase);
    }

    private async Task EditRow(PurchaseDetails purchase)
    {
        if (!_grid.IsValid)
        {
            return;
        }

        _backup = purchase.MakeCopy();
        await _grid.EditRow(purchase);
    }

    async Task SaveRow(PurchaseDetails purchase)
    {
        await _grid.UpdateRow(purchase);
    }

    private void CancelEdit(PurchaseDetails purchase)
    {
        if (_backup is not null)
        {
            purchase.Update(_backup);
        }
        else
        {
            _count--;
        }

        _grid.CancelEditRow(purchase);
    }

    private async Task OnUpdateRow(PurchaseDetails purchase)
    {
        var result = await ReceiptService.UpdatePurchase(ReceiptId, purchase);
        if (result.Match(_ => true, _ => false))
        {
            purchase.Update(_backup!);
        }

        await result.MatchAsync(_toast.OpenAsync, Id);
    }

    private async Task OnCreateRow(PurchaseDetails purchase)
    {
        var result = await ReceiptService.AddPurchase(ReceiptId, purchase);
        await result.MatchAsync(error =>
        {
            _grid.CancelEditRow(purchase);
            return _toast.OpenAsync(error);
        }, unit =>
        {
            _purchases = _purchases.Append(purchase);
            return Id(unit);
        });
    }

    private async Task Delete(PurchaseDetails purchase)
    {
        if (!await _confirmationDialog.IsConfirmed())
        {
            return;
        }

        Result<Unit, string> result = await ReceiptService.DeletePurchaseAsync(ReceiptId, purchase.Id);
        await result.MatchAsync(_toast.OpenAsync, unit =>
        {
            _purchases = _purchases.Where(p => p.Id != purchase.Id);
            return Id(unit);
        });
    }
}
